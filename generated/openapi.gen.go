// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// NewPet defines model for NewPet.
type NewPet struct {
	Name string  `json:"name"`
	Tag  *string `json:"tag,omitempty"`
}

// Pet defines model for Pet.
type Pet struct {
	Id   int64   `json:"id"`
	Name string  `json:"name"`
	Tag  *string `json:"tag,omitempty"`
}

// FindPetsParams defines parameters for FindPets.
type FindPetsParams struct {
	// Tags tags to filter by
	Tags *[]string `form:"tags,omitempty" json:"tags,omitempty"`

	// Limit maximum number of results to return
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// AddPetJSONRequestBody defines body for AddPet for application/json ContentType.
type AddPetJSONRequestBody = NewPet

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /pets)
	FindPets(ctx echo.Context, params FindPetsParams) error

	// (POST /pets)
	AddPet(ctx echo.Context) error

	// (DELETE /pets/{id})
	DeletePet(ctx echo.Context, id int64) error

	// (GET /pets/{id})
	FindPetById(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindPets converts echo context to params.
func (w *ServerInterfaceWrapper) FindPets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams
	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPets(ctx, params)
	return err
}

// AddPet converts echo context to params.
func (w *ServerInterfaceWrapper) AddPet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddPet(ctx)
	return err
}

// DeletePet converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePet(ctx, id)
	return err
}

// FindPetById converts echo context to params.
func (w *ServerInterfaceWrapper) FindPetById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPetById(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/pets", wrapper.FindPets)
	router.POST(baseURL+"/pets", wrapper.AddPet)
	router.DELETE(baseURL+"/pets/:id", wrapper.DeletePet)
	router.GET(baseURL+"/pets/:id", wrapper.FindPetById)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
